/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../dist/index.js":
/*!***************************!*\
  !*** ../../dist/index.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getWebGPUError = exports.sgemm = void 0;\nconst sgemm_chrome_1 = __webpack_require__(/*! ./sgemm_chrome */ \"../../dist/sgemm_chrome.js\");\nconst sgemm_fallback_1 = __webpack_require__(/*! ./sgemm_fallback */ \"../../dist/sgemm_fallback.js\");\nlet useFallback = false;\nlet lastError = null;\nfunction sgemm(m, n, k, alpha, a, b, beta = 0.0, c) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (useFallback) {\n            return (0, sgemm_fallback_1.sgemm)(m, n, k, alpha, a, b, beta, c);\n        }\n        let result = null;\n        try {\n            result = yield (0, sgemm_chrome_1.sgemm)(m, n, k, alpha, a, b, beta, c);\n        }\n        catch (error) {\n            lastError = error;\n            console.warn('Error using WebGPU; fallback to pure JavaScript', error);\n        }\n        if (result === null) {\n            useFallback = true;\n            return (0, sgemm_fallback_1.sgemm)(m, n, k, alpha, a, b, beta, c);\n        }\n        return result;\n    });\n}\nexports.sgemm = sgemm;\nfunction getWebGPUError() {\n    return lastError;\n}\nexports.getWebGPUError = getWebGPUError;\n\n\n//# sourceURL=webpack:///../../dist/index.js?");

/***/ }),

/***/ "../../dist/sgemm_chrome.js":
/*!**********************************!*\
  !*** ../../dist/sgemm_chrome.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sgemm = void 0;\nconst shader_sgemm_block_1 = __webpack_require__(/*! ./shader_sgemm_block */ \"../../dist/shader_sgemm_block.js\");\nconst shader_sgemm_generic_1 = __webpack_require__(/*! ./shader_sgemm_generic */ \"../../dist/shader_sgemm_generic.js\");\nlet polyfillgpu_called = false;\nfunction polyfillgpu() {\n    if (polyfillgpu_called) {\n        return;\n    }\n    polyfillgpu_called = true;\n}\nclass WebGPURunner {\n    constructor() {\n        this._initialized = false;\n        this.pipelineCache = new Map();\n        this.isSupportedDevice = false;\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._initialized) {\n                return;\n            }\n            polyfillgpu();\n            try {\n                const adapter = yield navigator.gpu.requestAdapter();\n                if (!adapter) {\n                    throw new Error(\"requestAdapter failed\");\n                }\n                this._device = yield adapter.requestDevice();\n                this.isSupportedDevice = true;\n            }\n            catch (ex) {\n                console.error('Unsupported device: ', ex.message);\n            }\n            this._initialized = true;\n        });\n    }\n    createPipeline(shader, bindingTypes) {\n        const device = this._device;\n        const bindings = [];\n        for (let i = 0; i < bindingTypes.length; i++) {\n            bindings.push({\n                binding: i,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: { type: bindingTypes[i] },\n            });\n        }\n        const bindGroupLayout = device.createBindGroupLayout({\n            entries: bindings\n        });\n        const pipelineLayout = device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] });\n        const shaderModule = device.createShaderModule({ code: shader });\n        const pipeline = device.createComputePipeline({\n            layout: pipelineLayout,\n            compute: {\n                module: shaderModule,\n                entryPoint: \"main\"\n            }\n        });\n        return { bindGroupLayout, pipeline };\n    }\n    run(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const device = this._device;\n            let chromeOutputCopyInfo = [];\n            const buffers = request.buffers.map((bparam, i) => {\n                if (i !== bparam.index) {\n                    throw new Error('request.buffers is not sorted in order of index');\n                }\n                let usage = GPUBufferUsage.STORAGE;\n                if (bparam.output) {\n                    usage |= GPUBufferUsage.COPY_SRC;\n                }\n                const buf = device.createBuffer({\n                    mappedAtCreation: bparam.input ? true : false,\n                    size: bparam.length * Float32Array.BYTES_PER_ELEMENT,\n                    usage\n                });\n                if (bparam.output) {\n                    const dst = device.createBuffer({\n                        size: bparam.length * Float32Array.BYTES_PER_ELEMENT,\n                        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n                    });\n                    chromeOutputCopyInfo.push({ src: buf, dst, size: bparam.length * Float32Array.BYTES_PER_ELEMENT, name: bparam.name });\n                }\n                return buf;\n            });\n            const bindGroup = device.createBindGroup({\n                layout: request.pipeline.bindGroupLayout,\n                entries: request.buffers.map((bparam, i) => ({\n                    binding: i,\n                    resource: {\n                        buffer: buffers[i],\n                        size: bparam.length * Float32Array.BYTES_PER_ELEMENT\n                    }\n                }))\n            });\n            for (let i = 0; i < request.buffers.length; i++) {\n                const bparam = request.buffers[i];\n                if (bparam.input) {\n                    const buffer = buffers[i];\n                    const buffer_ab = buffer.getMappedRange();\n                    const buffer_mapped_array = new Float32Array(buffer_ab);\n                    const input_array = request.inputData[bparam.name];\n                    if (!input_array) {\n                        console.error(`input array '${bparam.name}' is not supplied.`);\n                        continue;\n                    }\n                    if (input_array.length !== buffer_mapped_array.length) {\n                        console.error(`length of input array '${bparam.name}' does not match GPU buffer (${input_array.length} !== ${buffer_mapped_array.length}).`);\n                        continue;\n                    }\n                    buffer_mapped_array.set(input_array);\n                    buffer.unmap();\n                }\n            }\n            const commandEncoder = device.createCommandEncoder();\n            const passEncoder = commandEncoder.beginComputePass();\n            passEncoder.setBindGroup(0, bindGroup);\n            passEncoder.setPipeline(request.pipeline.pipeline);\n            passEncoder.dispatchWorkgroups(request.threadGroups.x, request.threadGroups.y, request.threadGroups.z);\n            if (passEncoder.end) {\n                passEncoder.end();\n            }\n            else {\n                // deprecated\n                // Firefox Nightly 111 has this\n                passEncoder.endPass();\n            }\n            for (const chromeCopy of chromeOutputCopyInfo) {\n                commandEncoder.copyBufferToBuffer(chromeCopy.src, 0, chromeCopy.dst, 0, chromeCopy.size);\n            }\n            device.queue.submit([commandEncoder.finish()]);\n            const outputs = {};\n            for (const chromeCopy of chromeOutputCopyInfo) {\n                yield chromeCopy.dst.mapAsync(GPUMapMode.READ);\n                const arrayBuffer = chromeCopy.dst.getMappedRange();\n                const buffer_mapped_array = new Float32Array(arrayBuffer);\n                const result_array = new Float32Array(buffer_mapped_array);\n                chromeCopy.dst.unmap();\n                chromeCopy.dst.destroy();\n                outputs[chromeCopy.name] = result_array;\n            }\n            for (const buffer of buffers) {\n                buffer.destroy();\n            }\n            const result = {\n                outputData: outputs,\n            };\n            return result;\n        });\n    }\n}\nconst runner = new WebGPURunner();\nfunction sgemm_block(m, n, k, alpha, a, b) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const shader = shader_sgemm_block_1.Shader;\n        const cache_key = 'sgemm_block';\n        let pipeline = runner.pipelineCache.get(cache_key);\n        if (!pipeline) {\n            pipeline = runner.createPipeline(shader, ['read-only-storage', 'read-only-storage', 'storage', 'read-only-storage']);\n            runner.pipelineCache.set(cache_key, pipeline);\n        }\n        const request = {\n            pipeline,\n            buffers: [\n                { index: 0, name: 'array_a', length: m * k, input: true, output: false },\n                { index: 1, name: 'array_b', length: k * n, input: true, output: false },\n                { index: 2, name: 'array_c', length: m * n, input: false, output: true },\n                { index: 3, name: 'meta', length: 7, input: true, output: false },\n            ],\n            inputData: { array_a: a, array_b: b, meta: new Float32Array([m, n, k, m / 4, n / 4, k / 4, alpha]) },\n            threadGroups: { x: n / 64, y: m / 32, z: 1 }\n        };\n        const result = yield runner.run(request);\n        return result.outputData.array_c;\n    });\n}\nfunction sgemm_generic(m, n, k, alpha, a, b) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const shader = shader_sgemm_generic_1.Shader;\n        const cache_key = 'sgemm_generic';\n        let pipeline = runner.pipelineCache.get(cache_key);\n        if (!pipeline) {\n            pipeline = runner.createPipeline(shader, ['read-only-storage', 'read-only-storage', 'storage', 'read-only-storage']);\n            runner.pipelineCache.set(cache_key, pipeline);\n        }\n        const request = {\n            pipeline,\n            buffers: [\n                { index: 0, name: 'array_a', length: m * k, input: true, output: false },\n                { index: 1, name: 'array_b', length: k * n, input: true, output: false },\n                { index: 2, name: 'array_c', length: m * n, input: false, output: true },\n                { index: 3, name: 'meta', length: 4, input: true, output: false },\n            ],\n            inputData: { array_a: a, array_b: b, meta: new Float32Array([m, n, k, alpha]) },\n            threadGroups: { x: Math.ceil(n / 8), y: Math.ceil(m / 8), z: 1 }\n        };\n        const result = yield runner.run(request);\n        return result.outputData.array_c;\n    });\n}\nfunction sgemm(m, n, k, alpha, a, b, beta = 0.0, c) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (beta !== 0.0) {\n            throw new Error('beta !== 0.0 is not yet supported');\n        }\n        yield runner.init();\n        if (!runner.isSupportedDevice) {\n            // do fallback\n            throw new Error('unsupported device');\n        }\n        if (m % 32 === 0 && n % 64 === 0 && k % 4 === 0 && alpha === 1.0) {\n            return sgemm_block(m, n, k, alpha, a, b);\n        }\n        else {\n            return sgemm_generic(m, n, k, alpha, a, b);\n        }\n    });\n}\nexports.sgemm = sgemm;\n\n\n//# sourceURL=webpack:///../../dist/sgemm_chrome.js?");

/***/ }),

/***/ "../../dist/sgemm_fallback.js":
/*!************************************!*\
  !*** ../../dist/sgemm_fallback.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sgemm = void 0;\nfunction sgemm(m, n, k, alpha, a, b, beta = 0.0, c) {\n    // To improve performance on WebGPU unsupported devices, use WebGL or WebAssembly\n    if (beta !== 0.0) {\n        throw new Error('beta !== 0.0 is not yet supported');\n    }\n    const result = new Float32Array(m * n);\n    for (let row = 0; row < m; row++) {\n        for (let col = 0; col < n; col++) {\n            let sum = 0.0;\n            for (let j = 0; j < k; j++) {\n                sum += a[row * k + j] * b[j * n + col];\n            }\n            result[row * n + col] = sum * alpha;\n        }\n    }\n    return result;\n}\nexports.sgemm = sgemm;\n\n\n//# sourceURL=webpack:///../../dist/sgemm_fallback.js?");

/***/ }),

/***/ "../../dist/shader_sgemm_block.js":
/*!****************************************!*\
  !*** ../../dist/shader_sgemm_block.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Shader = void 0;\nexports.Shader = `\n@group(0) @binding(0)\nvar<storage,read> array_a: array<vec4<f32>>;\n\n@group(0) @binding(1)\nvar<storage,read> array_b: array<vec4<f32>>;\n\n@group(0) @binding(2)\nvar<storage,read_write> array_c: array<vec4<f32>>;\n\nstruct CMeta {\n  M: f32,\n  N: f32,\n  K: f32,\n  MD4: f32,\n  ND4: f32,\n  KD4: f32,\n  alpha: f32,\n}\n\n@group(0) @binding(3)\nvar<storage,read> cmeta: CMeta;\n\n@compute @workgroup_size(8,8,1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>\n) {\n  var M: u32 = u32(cmeta.M);\n  var N: u32 = u32(cmeta.N);\n  var K: u32 = u32(cmeta.K);\n  var MD4: u32 = u32(cmeta.KD4);\n  var ND4: u32 = u32(cmeta.ND4);\n  var KD4: u32 = u32(cmeta.KD4);\n  var x: u32 = global_id.x;\n  var y: u32 = global_id.y;\n  if (x >= N || y >= M) {\n    return;\n  }\n  var alpha: f32 = cmeta.alpha;\n  var sum00: vec4<f32> = vec4<f32>();\n  var sum01: vec4<f32> = vec4<f32>();\n  var sum02: vec4<f32> = vec4<f32>();\n  var sum03: vec4<f32> = vec4<f32>();\n  var sum10: vec4<f32> = vec4<f32>();\n  var sum11: vec4<f32> = vec4<f32>();\n  var sum12: vec4<f32> = vec4<f32>();\n  var sum13: vec4<f32> = vec4<f32>();\n  for(var k: u32 = 0u; k < KD4; k = k + 1u) {\n    var arow0: vec4<f32> = array_a[(y * 4u + 0u) * KD4 + k];\n    var arow1: vec4<f32> = array_a[(y * 4u + 1u) * KD4 + k];\n    var arow2: vec4<f32> = array_a[(y * 4u + 2u) * KD4 + k];\n    var arow3: vec4<f32> = array_a[(y * 4u + 3u) * KD4 + k];\n    var brow: vec4<f32>;\n    brow = array_b[(k * 4u + 0u) * ND4 + x * 2u + 0u];\n    sum00 = vec4<f32>(arow0.x) * brow + sum00;\n    sum01 = vec4<f32>(arow1.x) * brow + sum01;\n    sum02 = vec4<f32>(arow2.x) * brow + sum02;\n    sum03 = vec4<f32>(arow3.x) * brow + sum03;\n    brow = array_b[(k * 4u + 0u) * ND4 + x * 2u + 1u];\n    sum10 = vec4<f32>(arow0.x) * brow + sum10;\n    sum11 = vec4<f32>(arow1.x) * brow + sum11;\n    sum12 = vec4<f32>(arow2.x) * brow + sum12;\n    sum13 = vec4<f32>(arow3.x) * brow + sum13;\n    \n    brow = array_b[(k * 4u + 1u) * ND4 + x * 2u + 0u];\n    sum00 = vec4<f32>(arow0.y) * brow + sum00;\n    sum01 = vec4<f32>(arow1.y) * brow + sum01;\n    sum02 = vec4<f32>(arow2.y) * brow + sum02;\n    sum03 = vec4<f32>(arow3.y) * brow + sum03;\n    brow = array_b[(k * 4u + 1u) * ND4 + x * 2u + 1u];\n    sum10 = vec4<f32>(arow0.y) * brow + sum10;\n    sum11 = vec4<f32>(arow1.y) * brow + sum11;\n    sum12 = vec4<f32>(arow2.y) * brow + sum12;\n    sum13 = vec4<f32>(arow3.y) * brow + sum13;\n    \n    brow = array_b[(k * 4u + 2u) * ND4 + x * 2u + 0u];\n    sum00 = vec4<f32>(arow0.z) * brow + sum00;\n    sum01 = vec4<f32>(arow1.z) * brow + sum01;\n    sum02 = vec4<f32>(arow2.z) * brow + sum02;\n    sum03 = vec4<f32>(arow3.z) * brow + sum03;\n    brow = array_b[(k * 4u + 2u) * ND4 + x * 2u + 1u];\n    sum10 = vec4<f32>(arow0.z) * brow + sum10;\n    sum11 = vec4<f32>(arow1.z) * brow + sum11;\n    sum12 = vec4<f32>(arow2.z) * brow + sum12;\n    sum13 = vec4<f32>(arow3.z) * brow + sum13;\n    \n    brow = array_b[(k * 4u + 3u) * ND4 + x * 2u + 0u];\n    sum00 = vec4<f32>(arow0.w) * brow + sum00;\n    sum01 = vec4<f32>(arow1.w) * brow + sum01;\n    sum02 = vec4<f32>(arow2.w) * brow + sum02;\n    sum03 = vec4<f32>(arow3.w) * brow + sum03;\n    brow = array_b[(k * 4u + 3u) * ND4 + x * 2u + 1u];\n    sum10 = vec4<f32>(arow0.w) * brow + sum10;\n    sum11 = vec4<f32>(arow1.w) * brow + sum11;\n    sum12 = vec4<f32>(arow2.w) * brow + sum12;\n    sum13 = vec4<f32>(arow3.w) * brow + sum13;\n  }\n  array_c[x * 2u + 0u + (y * 4u + 0u) * ND4] = sum00 * alpha;\n  array_c[x * 2u + 0u + (y * 4u + 1u) * ND4] = sum01 * alpha;\n  array_c[x * 2u + 0u + (y * 4u + 2u) * ND4] = sum02 * alpha;\n  array_c[x * 2u + 0u + (y * 4u + 3u) * ND4] = sum03 * alpha;\n  array_c[x * 2u + 1u + (y * 4u + 0u) * ND4] = sum10 * alpha;\n  array_c[x * 2u + 1u + (y * 4u + 1u) * ND4] = sum11 * alpha;\n  array_c[x * 2u + 1u + (y * 4u + 2u) * ND4] = sum12 * alpha;\n  array_c[x * 2u + 1u + (y * 4u + 3u) * ND4] = sum13 * alpha;\n}\n`;\n\n\n//# sourceURL=webpack:///../../dist/shader_sgemm_block.js?");

/***/ }),

/***/ "../../dist/shader_sgemm_generic.js":
/*!******************************************!*\
  !*** ../../dist/shader_sgemm_generic.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Shader = void 0;\nexports.Shader = `\n@group(0) @binding(0)\nvar<storage,read> array_a: array<f32>;\n\n@group(0) @binding(1)\nvar<storage,read> array_b: array<f32>;\n\n@group(0) @binding(2)\nvar<storage,read_write> array_c: array<f32>;\n\nstruct CMeta {\n  M: f32,\n  N: f32,\n  K: f32,\n  alpha: f32,\n}\n\n@group(0) @binding(3)\nvar<storage,read> cmeta: CMeta;\n\n@compute @workgroup_size(8,8,1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>\n) {\n  var M: u32 = u32(cmeta.M);\n  var N: u32 = u32(cmeta.N);\n  var K: u32 = u32(cmeta.K);\n  var x: u32 = global_id.x;\n  var y: u32 = global_id.y;\n  if (x >= N || y >= M) {\n    return;\n  }\n  var sum: f32 = 0.0;\n  for(var k: u32 = 0u; k < K; k = k + 1u) {\n    sum = array_a[y * K + k] * array_b[k * N + x] + sum;\n  }\n  array_c[x + y * N] = sum * cmeta.alpha;\n}\n`;\n\n\n//# sourceURL=webpack:///../../dist/shader_sgemm_generic.js?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var webgpu_blas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgpu-blas */ \"../../dist/index.js\");\n/* harmony import */ var webgpu_blas__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webgpu_blas__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar errorReported = false;\nfunction alertIfError() {\n    if (errorReported) {\n        return;\n    }\n    var error = (0,webgpu_blas__WEBPACK_IMPORTED_MODULE_0__.getWebGPUError)();\n    if (error) {\n        alert(\"WebGPU Error (fallback to pure JavaScript): \".concat(error));\n        errorReported = true;\n    }\n}\nfunction message(m, target) {\n    document.getElementById(target).innerText += m + '\\n';\n}\nfunction makeRandom(length) {\n    var array = new Float32Array(length);\n    for (var i = 0; i < length; i++) {\n        array[i] = Math.random();\n    }\n    return array;\n}\nfunction checkResult(m, n, k, alpha, array_a, array_b, actual) {\n    var expected = new Float32Array(m * n);\n    for (var row = 0; row < m; row++) {\n        for (var col = 0; col < n; col++) {\n            var sum = 0.0;\n            for (var j = 0; j < k; j++) {\n                sum += array_a[row * k + j] * array_b[j * n + col];\n            }\n            expected[row * n + col] = sum * alpha;\n        }\n    }\n    for (var row = 0; row < m; row++) {\n        for (var col = 0; col < n; col++) {\n            var idx = row * n + col;\n            var expected_el = expected[idx];\n            var actual_el = actual[idx];\n            if (Math.abs(expected_el - actual_el) > (1e-5 + 1e-3 * Math.abs(expected_el))) {\n                console.error(\"[\".concat(row, \", \").concat(col, \"]: \").concat(expected_el, \" !== \").concat(actual_el));\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction parseMNKTuples(s) {\n    var shapes = []; //[[m,n,k]]\n    for (var _i = 0, _a = s.split('\\n'); _i < _a.length; _i++) {\n        var line = _a[_i];\n        var parts = line.split(',').map(function (t) { return Number(t.trim()); });\n        if (parts.length === 3 && parts.every(function (v) { return v > 0; })) {\n            shapes.push(parts);\n        }\n    }\n    return shapes;\n}\nfunction run_benchmark() {\n    return __awaiter(this, void 0, void 0, function () {\n        var messageTarget, shapes, alpha, runs, _i, shapes_1, _a, m, n, k, array_a, array_b, timeSum, retSum, i, sgemmStartTime, result, sgemmEndTime, avgTime, flops, ex_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    messageTarget = 'bench_message';\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 10, , 11]);\n                    shapes = parseMNKTuples(document.getElementById('benchmark_shapes').value);\n                    alpha = 1.0;\n                    runs = 10;\n                    _i = 0, shapes_1 = shapes;\n                    _b.label = 2;\n                case 2:\n                    if (!(_i < shapes_1.length)) return [3 /*break*/, 9];\n                    _a = shapes_1[_i], m = _a[0], n = _a[1], k = _a[2];\n                    array_a = makeRandom(m * k);\n                    array_b = makeRandom(k * n);\n                    // warmup\n                    return [4 /*yield*/, (0,webgpu_blas__WEBPACK_IMPORTED_MODULE_0__.sgemm)(m, n, k, alpha, array_a, array_b)];\n                case 3:\n                    // warmup\n                    _b.sent();\n                    alertIfError();\n                    timeSum = 0;\n                    retSum = 0;\n                    i = 0;\n                    _b.label = 4;\n                case 4:\n                    if (!(i < runs)) return [3 /*break*/, 7];\n                    console.time('sgemm');\n                    sgemmStartTime = performance.now();\n                    return [4 /*yield*/, (0,webgpu_blas__WEBPACK_IMPORTED_MODULE_0__.sgemm)(m, n, k, alpha, array_a, array_b)];\n                case 5:\n                    result = _b.sent();\n                    retSum += result[0];\n                    sgemmEndTime = performance.now();\n                    console.timeEnd('sgemm');\n                    timeSum += sgemmEndTime - sgemmStartTime;\n                    _b.label = 6;\n                case 6:\n                    i++;\n                    return [3 /*break*/, 4];\n                case 7:\n                    avgTime = timeSum / runs;\n                    flops = m * n * k * 2 * 1000 / avgTime / 1000000000;\n                    message(\"Sgemm of (\".concat(m, \"x\").concat(k, \"),(\").concat(k, \"x\").concat(n, \"): average \").concat(avgTime, \" ms (\").concat(runs, \" runs), \").concat(flops.toFixed(2), \" GFLOPS\"), messageTarget);\n                    console.log('sum of result (to avoid optimization)', retSum);\n                    alertIfError();\n                    _b.label = 8;\n                case 8:\n                    _i++;\n                    return [3 /*break*/, 2];\n                case 9: return [3 /*break*/, 11];\n                case 10:\n                    ex_1 = _b.sent();\n                    alert(ex_1.message);\n                    return [3 /*break*/, 11];\n                case 11: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction small_example() {\n    return __awaiter(this, void 0, void 0, function () {\n        var array_a, array_b, result, ex_2;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    array_a = new Float32Array([1, 2, 3, 4]);\n                    array_b = new Float32Array([5, 6, 7, 8]);\n                    return [4 /*yield*/, (0,webgpu_blas__WEBPACK_IMPORTED_MODULE_0__.sgemm)(2, 2, 2, 1, array_a, array_b)];\n                case 1:\n                    result = _a.sent();\n                    alertIfError();\n                    document.getElementById('small_example_result').innerText = \"[\".concat(result[0], \", \").concat(result[1], \"\\n \").concat(result[2], \", \").concat(result[3], \"]\");\n                    return [3 /*break*/, 3];\n                case 2:\n                    ex_2 = _a.sent();\n                    alert(ex_2.message);\n                    return [3 /*break*/, 3];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction run_test() {\n    return __awaiter(this, void 0, void 0, function () {\n        var shapes, alpha, messageTarget, _i, shapes_2, _a, m, n, k, array_a, array_b, result, validation_result;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    shapes = parseMNKTuples(document.getElementById('test_shapes').value);\n                    alpha = 1.0;\n                    messageTarget = 'test_message';\n                    _i = 0, shapes_2 = shapes;\n                    _b.label = 1;\n                case 1:\n                    if (!(_i < shapes_2.length)) return [3 /*break*/, 4];\n                    _a = shapes_2[_i], m = _a[0], n = _a[1], k = _a[2];\n                    array_a = makeRandom(m * k);\n                    array_b = makeRandom(k * n);\n                    return [4 /*yield*/, (0,webgpu_blas__WEBPACK_IMPORTED_MODULE_0__.sgemm)(m, n, k, alpha, array_a, array_b)];\n                case 2:\n                    result = _b.sent();\n                    alertIfError();\n                    validation_result = checkResult(m, n, k, alpha, array_a, array_b, result);\n                    message(\"M=\".concat(m, \", N=\").concat(n, \", K=\").concat(k, \": \").concat(validation_result ? 'OK' : 'Error'), messageTarget);\n                    _b.label = 3;\n                case 3:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nwindow.addEventListener('load', function () {\n    document.getElementById('run_benchmark').onclick = run_benchmark;\n    document.getElementById('small_example').onclick = small_example;\n    document.getElementById('run_test').onclick = run_test;\n    document.getElementById('is_webgpu_enabled').innerText = navigator.gpu ? 'Enabled' : 'Disabled (fallback pure JavaScript implementation will be used)';\n});\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;